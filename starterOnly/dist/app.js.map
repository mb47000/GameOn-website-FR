{"version":3,"sources":["webpack://starteronly/./js/Class/Modal.js","webpack://starteronly/./js/formConfig.js","webpack://starteronly/./js/index.js","webpack://starteronly/./js/nav.js","webpack://starteronly/./js/Class/Validator.js"],"names":["Modal","modalbg","document","querySelector","modalBtn","querySelectorAll","closeBtn","closeConfirm","modalConfirm","form","getElementsByName","dom","forEach","btn","addEventListener","launchModal","closeModal","style","display","classList","remove","add","formFields","firstName","element","getElementById","validationType","invalidMessage","lastName","email","birthdate","quantity","location","checkbox","fieldContainer","window","editNav","x","className","launchModalEvent","validator","state","name","value","length","test","number","radio","checked","date","setFormValid","Array","from","map","field","dataset","errorVisible","input","parentNode","setAttribute","resetValidation","nameValidation","invalidInputStyle","emailValidation","numberValidation","radioValidation","checkboxValidation","dateValidation","getFormValid","this","formName","onsubmit","event","preventDefault","launchValidation","reset"],"mappings":"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","file":"app.bundle.js","sourcesContent":["export default class Modal {\r\n  // DOM Elements\r\n  static dom = {\r\n    modalbg: document.querySelector(\".bground\"),\r\n    modalBtn: document.querySelectorAll(\".modal-btn\"),\r\n    closeBtn: document.querySelector(\".close\"),\r\n    closeConfirm: document.querySelector(\".close-confirm\"),\r\n    modalConfirm: document.querySelector(\".confirm-modal\"),\r\n    form: document.getElementsByName(\"reserve\")[0],\r\n  };\r\n\r\n  // launch modal event, add listener for open the modal and close them with the close button or X button\r\n  static launchModalEvent = () => {\r\n    this.dom.modalBtn.forEach((btn) =>\r\n      btn.addEventListener(\"click\", this.launchModal)\r\n    );\r\n\r\n    this.dom.closeBtn.addEventListener(\"click\", this.closeModal);\r\n    this.dom.closeBtn.addEventListener(\"click\", this.closeConfirm);\r\n    this.dom.closeConfirm.addEventListener(\"click\", this.closeConfirm);\r\n\r\n  };\r\n\r\n  // launch modal form, display the modal with css property display block\r\n  static launchModal = () => (this.dom.modalbg.style.display = \"block\");\r\n\r\n  // Close modal, hide the modal with css property display none\r\n  static closeModal = () => (this.dom.modalbg.style.display = \"none\");\r\n\r\n  //Close confirm modal, reset the display of the modal\r\n  static closeConfirm = () => {\r\n    this.closeModal();\r\n    this.dom.form.style.display = \"block\";\r\n    this.dom.modalConfirm.style.display = \"none\";\r\n    this.dom.modalConfirm.classList.remove(\"confirm-message\");\r\n  };\r\n\r\n  // Show message validation and hide form\r\n  static validation = () => {\r\n    this.dom.form.style.display = \"none\";\r\n    this.dom.modalConfirm.style.display = \"block\";\r\n    this.dom.modalConfirm.classList.add(\"confirm-message\");\r\n  };\r\n}\r\n","const formFields = {\r\n  firstName: {\r\n    element: document.getElementById(\"first\"),\r\n    validationType: \"name\",\r\n    invalidMessage: \"Veuillez entrer 2 caractÃ¨res ou plus pour le champ du prÃ©nom.\"\r\n  },\r\n  lastName: {\r\n    element: document.getElementById(\"last\"),\r\n    validationType: \"name\",\r\n    invalidMessage: \"Veuillez entrer 2 caractÃ¨res ou plus pour le champ du nom.\"\r\n  },\r\n  email: {\r\n    element: document.getElementById(\"email\"),\r\n    validationType: \"email\",\r\n    invalidMessage: \"Veuillez entrer une adresse mail valide.\"\r\n  },\r\n  birthdate: {\r\n    element: document.getElementById(\"birthdate\"),\r\n    validationType: \"date\",\r\n    invalidMessage: \"Vous devez entrer votre date de naissance.\"\r\n  },\r\n  quantity: {\r\n    element: document.getElementById(\"quantity\"),\r\n    validationType: \"number\",\r\n    invalidMessage: \"Veuillez entrer un nombre.\"\r\n  },\r\n  location: {\r\n    element: document.querySelectorAll('input[name=\"location\"]'),\r\n    validationType: \"radio\",\r\n    invalidMessage: \"Veuillez selectionner une ville.\"\r\n  },\r\n  checkbox: {\r\n    element: document.getElementById(\"checkbox1\"),\r\n    validationType: \"checkbox\",\r\n    invalidMessage: \"Vous devez vÃ©rifier que vous acceptez les termes et conditions.\"\r\n  },\r\n};\r\n\r\nconst fieldContainer = document.querySelectorAll(\".formData\");\r\n\r\nexport { formFields, fieldContainer};\r\n","import editNav from \"./nav.js\";\r\nimport Modal from \"./Class/Modal.js\";\r\nimport Validator from \"./Class/Validator.js\";\r\nimport {formFields, fieldContainer} from \"./formConfig.js\";\r\n\r\n\r\n/* Functions used in onxyz-attribute-style handlers (onclick=\"editNav()) must be globals,\r\n   make it a global by assigning to a window property  */\r\nwindow.editNav = editNav; //ðŸ’©\r\n\r\n// initialize modal ðŸš€\r\nModal.launchModalEvent();\r\n\r\nconst validator = new Validator(fieldContainer, formFields);\r\n\r\nconst formName = document.getElementsByName(\"reserve\")[0];\r\n\r\nformName.onsubmit = (event) => {\r\n  event.preventDefault();\r\n  \r\n  if (validator.launchValidation()) {\r\n    formName.reset();\r\n    Modal.validation();\r\n  }\r\n};\r\n","export default function editNav() {\r\n    var x = document.getElementById(\"myTopnav\");\r\n    if (x.className === \"topnav\") {\r\n      x.className += \" responsive\";\r\n    } else {\r\n      x.className = \"topnav\";\r\n    }\r\n  }","export default class Validator {\r\n  #formValid = true;\r\n\r\n  constructor(fieldContainer, formFields) {\r\n    this.fieldContainer = fieldContainer;\r\n    this.formFields = formFields;\r\n  }\r\n\r\n  getFormValid = () => this.#formValid;\r\n\r\n  setFormValid = (state) => (this.#formValid = state);\r\n\r\n  // Methods for validation types\r\n  nameValidation = (name) =>\r\n    name.value !== null && name.value.length >= 2 ? true : false;\r\n\r\n  emailValidation = (email) =>\r\n    /^([a-z0-9_\\.-]+\\@[\\da-z\\.-]+\\.[a-z\\.]{2,6})$/.test(email.value);\r\n\r\n  numberValidation = (number) => /^[0-9]+$/.test(number.value);\r\n\r\n  radioValidation = (radio) => {\r\n    for (let element of radio) if (element.checked) return true;\r\n  };\r\n\r\n  checkboxValidation = (checkbox) => checkbox.checked;\r\n\r\n  dateValidation = (date) => (date.value != \"\" ? true : false);\r\n\r\n  // Reset errors fields style and set the default value for private property #formValid\r\n  resetValidation = () => {\r\n    this.setFormValid(true);\r\n    Array.from(this.fieldContainer).map((field) => {\r\n      field.dataset.errorVisible = false;\r\n    });\r\n  };\r\n\r\n  // Add css style for invalid input entry and show message\r\n  invalidInputStyle = (input, invalidMessage) => {\r\n    input.parentNode.setAttribute(\"data-error-visible\", true);\r\n    input.parentNode.setAttribute(\"data-error\", invalidMessage);\r\n  };\r\n\r\n  // Check input validity for each element in formFields attribute\r\n  launchValidation = () => {\r\n    // reset form validation\r\n    this.resetValidation();\r\n\r\n    for (const field in this.formFields) {\r\n      switch (this.formFields[field].validationType) {\r\n        case \"name\":\r\n          if (!this.nameValidation(this.formFields[field].element)) {\r\n            this.invalidInputStyle(\r\n              this.formFields[field].element,\r\n              this.formFields[field].invalidMessage\r\n            );\r\n            this.setFormValid(false);\r\n          }\r\n          break;\r\n\r\n        case \"email\":\r\n          if (!this.emailValidation(this.formFields[field].element)) {\r\n            this.invalidInputStyle(\r\n              this.formFields[field].element,\r\n              this.formFields[field].invalidMessage\r\n            );\r\n            this.setFormValid(false);\r\n          }\r\n          break;\r\n\r\n        case \"number\":\r\n          if (!this.numberValidation(this.formFields[field].element)) {\r\n            this.invalidInputStyle(\r\n              this.formFields[field].element,\r\n              this.formFields[field].invalidMessage\r\n            );\r\n            this.setFormValid(false);\r\n          }\r\n          break;\r\n\r\n        case \"radio\":\r\n          if (!this.radioValidation(this.formFields[field].element)) {\r\n            this.invalidInputStyle(\r\n              this.formFields[field].element[0],\r\n              this.formFields[field].invalidMessage\r\n            );\r\n            this.setFormValid(false);\r\n          }\r\n          break;\r\n\r\n        case \"checkbox\":\r\n          if (!this.checkboxValidation(this.formFields[field].element)) {\r\n            this.invalidInputStyle(\r\n              this.formFields[field].element,\r\n              this.formFields[field].invalidMessage\r\n            );\r\n            this.setFormValid(false);\r\n          }\r\n          break;\r\n\r\n        case \"date\":\r\n          if (!this.dateValidation(this.formFields[field].element)) {\r\n            this.invalidInputStyle(\r\n              this.formFields[field].element,\r\n              this.formFields[field].invalidMessage\r\n            );\r\n            this.setFormValid(false);\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return this.getFormValid();\r\n  };\r\n}\r\n"],"sourceRoot":""}